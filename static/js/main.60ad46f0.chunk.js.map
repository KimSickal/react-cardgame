{"version":3,"sources":["models/index.ts","actions/types/SnakeActionTypes.ts","selectors/SnakeSelector.ts","selectors/GridSelector.ts","actions/types/GridActionTypes.ts","constants/grid.ts","actions/SnakeActions.ts","actions/GridActions.ts","containers/GridContainer.tsx","containers/KeyboardHandlerContainer.tsx","reducers/SnakeReducer.ts","reducers/GridReducer.ts","reducers/index.ts","App.tsx","index.tsx"],"names":["__webpack_require__","SnakeKeys","getState","state","snake","getPos","createSelector","head","getTails","posX","posY","tails","getGameStatus","isGameOver","getScore","score","grid","getGrid","getItem","item","GridKeys","CellType","gridSize","pushTails","targetPos","type","PUSH_TAILS","moveHead","MOVE_HEAD","toggleGameOver","TOGGLE_GAME_OVER","keydownMoveHead","prevPos","endOfTail","dispatch","setCell","CELL_SNAKE_HEAD","undefined","CELL_BLANK","CELL_SNAKE_BODY","POP_TAILS","keydownMoveAndStretch","randomPutItem","INCREMENT_SCORE","keydownMoveHeadIfNeeded","keyCode","couldMoveHead","targetCellType","CELL_SNAKE_ITEM","position","cellType","SET_CELL","RANDOM_PUT_ITEM","initializeGrid","INIT_GRID","GridComponent","this","props","_this$props","react","style","width","concat","height","border","KeyboardHandlerContainer","background","top","left","map","e","i","key","React","GridContainer","connect","bindActionCreators","KeyboardHandlerComponent","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onKeyDown","bind","assertThisInitialized","ev","window","addEventListener","removeEventListener","initialSnakeState","initialGridState","reducers","combineReducers","arguments","length","action","objectSpread","slice","initGrid","Array","from","_1","_2","j","newGrid","randomPosX","randomPosY","Math","floor","random","App","_React$Component","apply","inherits","createClass","value","display","flexDirection","es","store","createStore","applyMiddleware","thunk","className","ReactDOM","render","react_default","a","createElement","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.60ad46f0.chunk.js","sourcesContent":["export * from './position';\n","import {\n\tAction,\n} from 'redux';\n\nimport {\n\tposition,\n} from '../../models';\n\nexport enum SnakeKeys {\n\tMOVE_HEAD = 'MOVE_HEAD',\n\tPOP_TAILS = 'POP_TAILS',\n\tPUSH_TAILS = 'PUSH_TAILS',\n\tTOGGLE_GAME_OVER = 'TOGGLE_GAME_OVER',\n\tINCREMENT_SCORE = 'INCREMENT_SCORE',\n}\n\nexport interface MoveHeadAction extends Action {\n\ttype: SnakeKeys.MOVE_HEAD;\n\ttargetPos: position;\n}\n\nexport interface PopTailsAction extends Action {\n\ttype: SnakeKeys.POP_TAILS;\n}\n\nexport interface PushTailsAction extends Action {\n\ttype: SnakeKeys.PUSH_TAILS;\n\ttargetPos: position;\n}\n\nexport interface ToggleGameOverAction extends Action {\n\ttype: SnakeKeys.TOGGLE_GAME_OVER;\n}\n\nexport interface IncrementScoreAction extends Action {\n\ttype: SnakeKeys.INCREMENT_SCORE;\n}\n\nexport type SnakeAction = (\n\t| MoveHeadAction\n\t| PopTailsAction\n\t| PushTailsAction\n\t| ToggleGameOverAction\n\t| IncrementScoreAction\n);\n","import {\n\tcreateSelector,\n} from 'reselect';\n\nimport {\n\tState,\n} from '../reducers';\n\nconst getState = (state: State) => {\n\treturn state.snake;\n};\n\nexport const getPos = createSelector([\n\tgetState,\n], (state) => {\n\treturn state.head;\n});\n\nexport const getPosX = createSelector([\n\tgetState,\n], (state) => {\n\treturn state.head.posX;\n});\n\nexport const getPosY = createSelector([\n\tgetState,\n], (state) => {\n\treturn state.head.posY;\n});\n\nexport const getTails = createSelector([\n\tgetState,\n], (state) => {\n\treturn state.tails;\n});\n\nexport const getGameStatus = createSelector([\n\tgetState,\n], (state) => {\n\treturn state.isGameOver;\n});\n\nexport const getScore = createSelector([\n\tgetState,\n], (state) => {\n\treturn state.score;\n});\n","import {\n\tcreateSelector,\n} from 'reselect';\n\nimport {\n\tState,\n} from '../reducers';\n\nconst getState = (state: State) => {\n\treturn state.grid;\n};\n\nexport const getGrid = createSelector([\n\tgetState,\n], (state) => {\n\treturn state.grid;\n});\n\nexport const getItem = createSelector([\n\tgetState,\n], (state) => {\n\treturn state.item;\n});\n","import {\n\tAction,\n} from 'redux';\n\nimport {\n\tposition,\n} from '../../models';\n\nimport {\n\tCellType,\n} from '../../constants';\n\nexport enum GridKeys {\n\tSET_CELL = 'SET_CELL',\n\tINIT_GRID = 'INIT_GRID',\n\tRANDOM_PUT_ITEM = 'RANDOM_PUT_ITEM',\n}\n\nexport interface setCellAction extends Action {\n\ttype: GridKeys.SET_CELL;\n\tposition: position;\n\tcellType: CellType;\n}\n\nexport interface initializeGridAction extends Action {\n\ttype: GridKeys.INIT_GRID;\n\thead: position;\n}\n\nexport interface randomPutItemAction extends Action {\n\ttype: GridKeys.RANDOM_PUT_ITEM;\n}\n\nexport type GridAction = (\n\t| setCellAction\n\t| initializeGridAction\n\t| randomPutItemAction\n);\n","export const gridSize = [10, 10];\nexport const cellSize = 20;\n\nexport enum CellType {\n\tCELL_BLANK = 0,\n\tCELL_SNAKE_HEAD,\n\tCELL_SNAKE_BODY,\n\tCELL_SNAKE_ITEM,\n}\n","import {\n\tDispatch,\n\tAnyAction,\n} from 'redux';\n\nimport {\n\tSnakeKeys,\n\tPopTailsAction,\n\tPushTailsAction,\n\tMoveHeadAction,\n\tToggleGameOverAction,\n\tIncrementScoreAction,\n} from './types';\n\nimport {\n\tState,\n} from '../reducers';\n\nimport {\n\tposition,\n} from '../models';\n\nimport {\n\tgetPos,\n\tgetTails,\n\tgetGrid,\n} from '../selectors';\n\nimport {\n\trandomPutItem,\n\tsetCell,\n} from '../actions';\n\nimport {\n\tCellType,\n\tgridSize,\n} from '../constants';\n\nfunction popTails(): PopTailsAction {\n\treturn {\n\t\ttype: SnakeKeys.POP_TAILS,\n\t};\n}\n\nfunction pushTails(targetPos: position): PushTailsAction {\n\treturn {\n\t\ttype: SnakeKeys.PUSH_TAILS,\n\t\ttargetPos: targetPos,\n\t};\n}\n\nfunction moveHead(targetPos: position): MoveHeadAction {\n\treturn {\n\t\ttype: SnakeKeys.MOVE_HEAD,\n\t\ttargetPos: targetPos,\n\t};\n}\n\nfunction toggleGameOver(): ToggleGameOverAction {\n\treturn {\n\t\ttype: SnakeKeys.TOGGLE_GAME_OVER,\n\t};\n}\n\nfunction incrementScore(): IncrementScoreAction {\n\treturn {\n\t\ttype: SnakeKeys.INCREMENT_SCORE,\n\t};\n}\n\nfunction couldMoveHead(keyCode: number, targetPos: position, state: State) {\n\tif(targetPos.posY < 0 || targetPos.posY >= gridSize[0]) {\n\t\treturn false;\n\t}\n\tif(targetPos.posX < 0 || targetPos.posX >= gridSize[1]) {\n\t\treturn false;\n\t}\n\treturn keyCode >= 37 && keyCode <= 40;\n}\n\nfunction keydownMoveHead(prevPos: position, targetPos: position, endOfTail: position) {\n\treturn (dispatch: Dispatch<AnyAction>) => {\n\t\tdispatch(setCell(targetPos, CellType.CELL_SNAKE_HEAD));\n\t\tdispatch(moveHead(targetPos));\n\t\tif(endOfTail === undefined) {\n\t\t\tdispatch(setCell(prevPos, CellType.CELL_BLANK));\n\t\t}\n\t\telse {\n\t\t\tdispatch(setCell(prevPos, CellType.CELL_SNAKE_BODY));\n\t\t\tdispatch(setCell(endOfTail, CellType.CELL_BLANK));\n\n\t\t\tdispatch(pushTails(prevPos));\n\t\t\tdispatch(popTails());\n\t\t}\n\t};\n}\n\nfunction keydownMoveAndStretch(prevPos: position, targetPos: position) {\n\treturn (dispatch: Dispatch<AnyAction>) => {\n\t\tdispatch(setCell(prevPos, CellType.CELL_SNAKE_BODY));\n\t\tdispatch(setCell(targetPos, CellType.CELL_SNAKE_HEAD));\n\n\t\tdispatch(moveHead(targetPos));\n\t\tdispatch(pushTails(prevPos));\n\n\t\tdispatch(randomPutItem());\n\t\tdispatch(incrementScore());\n\t};\n}\n\nexport function keydownMoveHeadIfNeeded(keyCode: number) {\n\treturn (dispatch: Dispatch<any>, getState: () => State) => {\n\t\tconst state = getState();\n\t\tconst prevPos = getPos(state);\n\t\tconst targetPos = (() => {\n\t\t\tswitch(keyCode) {\n\t\t\t\tcase 37:\n\t\t\t\t\treturn {\n\t\t\t\t\t\tposX: prevPos.posX - 1,\n\t\t\t\t\t\tposY: prevPos.posY,\n\t\t\t\t\t};\n\t\t\t\tcase 38:\n\t\t\t\t\treturn {\n\t\t\t\t\t\tposX: prevPos.posX,\n\t\t\t\t\t\tposY: prevPos.posY - 1,\n\t\t\t\t\t};\n\t\t\t\tcase 39:\n\t\t\t\t\treturn {\n\t\t\t\t\t\tposX: prevPos.posX + 1,\n\t\t\t\t\t\tposY: prevPos.posY,\n\t\t\t\t\t};\n\t\t\t\tcase 40:\n\t\t\t\t\treturn {\n\t\t\t\t\t\tposX: prevPos.posX,\n\t\t\t\t\t\tposY: prevPos.posY + 1,\n\t\t\t\t\t};\n\t\t\t\tdefault:\n\t\t\t\t\treturn prevPos;\n\t\t\t}\n\t\t})();\n\n\t\tif(couldMoveHead(keyCode, targetPos, state)) {\n\t\t\tconst targetCellType = getGrid(state)[targetPos.posY][targetPos.posX];\n\t\t\tif(targetCellType === CellType.CELL_BLANK) {\n\t\t\t\tconst endOfTail = getTails(state)[0];\n\t\t\t\tdispatch(keydownMoveHead(prevPos, targetPos, endOfTail));\n\t\t\t}\n\t\t\telse if(targetCellType === CellType.CELL_SNAKE_ITEM) {\n\t\t\t\tdispatch(keydownMoveAndStretch(prevPos, targetPos));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tdispatch(toggleGameOver());\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tdispatch(toggleGameOver());\n\t\t}\n\t};\n}\n","import {\n\tsetCellAction,\n\tGridKeys,\n\tinitializeGridAction,\n\trandomPutItemAction,\n} from './types';\n\nimport {\n\tposition,\n} from '../models';\n\nimport {\n\tCellType,\n} from '../constants';\n\nexport function setCell(position: position, cellType: CellType): setCellAction {\n\treturn {\n\t\ttype: GridKeys.SET_CELL,\n\t\tposition: position,\n\t\tcellType: cellType,\n\t};\n}\n\nexport function randomPutItem(): randomPutItemAction {\n\treturn {\n\t\ttype: GridKeys.RANDOM_PUT_ITEM,\n\t};\n}\n\nexport function initializeGrid(head: position): initializeGridAction {\n\treturn {\n\t\ttype: GridKeys.INIT_GRID,\n\t\thead: head,\n\t};\n}\n","import * as React from 'react';\n\nimport {\n\tDispatch,\n\tAnyAction,\n\tbindActionCreators,\n} from 'redux';\n\nimport {\n\tconnect,\n} from 'react-redux';\n\nimport {\n\tState,\n} from '../reducers';\n\nimport {\n\tgetPos,\n\tgetTails,\n\tgetItem,\n\tgetGameStatus,\n\tgetScore,\n} from '../selectors';\n\nimport {\n\tposition,\n} from '../models';\n\nimport {\n\tinitializeGrid,\n\trandomPutItem,\n} from '../actions';\n\nimport {\n\tgridSize,\n\tcellSize,\n} from '../constants';\n\nimport {\n\tKeyboardHandlerContainer,\n} from '../containers';\n\ninterface ComponentProps {\n\thead: position;\n\ttails: position[];\n\titem: position;\n\tisGameOver: boolean;\n\tscore: number;\n\n\tinitializeGrid: typeof initializeGrid;\n\trandomPutItem: typeof randomPutItem;\n}\n\nclass GridComponent extends React.Component<ComponentProps> {\n\tpublic componentDidMount() {\n\t\tconst {\n\t\t\thead,\n\t\t} = this.props;\n\t\tthis.props.initializeGrid(head);\n\t\tthis.props.randomPutItem();\n\t}\n\n\tpublic render() {\n\t\tconst {\n\t\t\thead,\n\t\t\ttails,\n\t\t\titem,\n\t\t\tisGameOver,\n\t\t\tscore,\n\t\t} = this.props;\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\twidth: `${gridSize[1] * cellSize}px`,\n\t\t\t\t\theight: `${gridSize[0] * cellSize}px`,\n\t\t\t\t\tborder: '2px solid grey',\n\t\t\t\t}}\n\t\t\t>\n\t\t\t{\n\t\t\t\tisGameOver ?\n\t\t\t\t<React.Fragment>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t{'Game'}\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t{'Set'}\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t{`Score: ${score}`}\n\t\t\t\t\t</p>\n\t\t\t\t</React.Fragment>\n\t\t\t\t:\n\t\t\t\t<React.Fragment>\n\t\t\t\t\t<KeyboardHandlerContainer/>\n\t\t\t\t\t<div\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\t\t\twidth: `${cellSize}px`,\n\t\t\t\t\t\t\theight: `${cellSize}px`,\n\t\t\t\t\t\t\tbackground: 'black',\n\t\t\t\t\t\t\ttop: head.posY * cellSize,\n\t\t\t\t\t\t\tleft: head.posX * cellSize,\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t\t{tails.map((e, i) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\t\t\t\t\twidth: `${cellSize}px`,\n\t\t\t\t\t\t\t\t\theight: `${cellSize}px`,\n\t\t\t\t\t\t\t\t\tbackground: 'grey',\n\t\t\t\t\t\t\t\t\ttop: e.posY * cellSize,\n\t\t\t\t\t\t\t\t\tleft: e.posX * cellSize,\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t\t<div\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\t\t\twidth: `${cellSize}px`,\n\t\t\t\t\t\t\theight: `${cellSize}px`,\n\t\t\t\t\t\t\tbackground: 'red',\n\t\t\t\t\t\t\ttop: item.posY * cellSize,\n\t\t\t\t\t\t\tleft: item.posX * cellSize,\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</React.Fragment>\n\t\t\t}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nfunction mapStateToProps(state: State) {\n\treturn {\n\t\thead: getPos(state),\n\t\ttails: getTails(state),\n\t\titem: getItem(state),\n\t\tisGameOver: getGameStatus(state),\n\t\tscore: getScore(state),\n\t};\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>) {\n\treturn bindActionCreators({\n\t\tinitializeGrid: initializeGrid,\n\t\trandomPutItem: randomPutItem,\n\t}, dispatch);\n}\nexport const GridContainer = connect(mapStateToProps, mapDispatchToProps)(GridComponent);\n","import * as React from 'react';\n\nimport {\n\tAnyAction,\n\tDispatch,\n\tbindActionCreators,\n} from 'redux';\n\nimport {\n\tconnect,\n} from 'react-redux';\n\nimport {\n\tkeydownMoveHeadIfNeeded,\n\tinitializeGrid,\n} from '../actions';\n\nimport {\n\tState,\n} from '../reducers';\n\ninterface ComponentProps {\n\tkeydownMoveHeadIfNeeded: typeof keydownMoveHeadIfNeeded;\n\tinitializeGrid: typeof initializeGrid;\n}\n\nclass KeyboardHandlerComponent extends React.Component<ComponentProps> {\n\tconstructor(props: ComponentProps) {\n\t\tsuper(props);\n\t\tthis.onKeyDown = this.onKeyDown.bind(this);\n\t}\n\n\tprivate onKeyDown(ev: KeyboardEvent) {\n\t\tthis.props.keydownMoveHeadIfNeeded(ev.keyCode);\n\t}\n\n\tpublic componentDidMount() {\n\t\twindow.addEventListener('keydown', this.onKeyDown);\n\t}\n\n\tpublic componentWillUnmount() {\n\t\twindow.removeEventListener('keydown', this.onKeyDown);\n\t}\n\n\tpublic render() {\n\t\treturn (\n\t\t\t<div/>\n\t\t);\n\t}\n}\n\nfunction mapStateToProps(state: State) {\n\treturn {};\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>) {\n\treturn bindActionCreators({\n\t\tkeydownMoveHeadIfNeeded: keydownMoveHeadIfNeeded,\n\t\tinitializeGrid: initializeGrid,\n\t}, dispatch);\n}\n\nexport const KeyboardHandlerContainer = connect(mapStateToProps, mapDispatchToProps)(KeyboardHandlerComponent);\n","import {\n\tSnakeAction,\n\tSnakeKeys,\n} from '../actions/types';\n\nimport {\n\tposition,\n} from '../models';\n\nexport interface SnakeState {\n\thead: position;\n\ttails: position[];\n\tisGameOver: boolean;\n\tscore: number;\n}\n\nconst initialSnakeState: SnakeState = {\n\thead: {\n\t\tposX: 0,\n\t\tposY: 0,\n\t},\n\ttails: [],\n\tisGameOver: false,\n\tscore: 0,\n};\n\nexport function snake(state = initialSnakeState, action: SnakeAction) {\n\tconst {\n\t\ttails,\n\t\tscore,\n\t} = state;\n\n\tswitch(action.type) {\n\t\tcase SnakeKeys.MOVE_HEAD:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\thead: action.targetPos,\n\t\t\t};\n\t\tcase SnakeKeys.POP_TAILS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\ttails: tails.slice(1),\n\t\t\t};\n\t\tcase SnakeKeys.PUSH_TAILS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\ttails: tails.concat(action.targetPos),\n\t\t\t};\n\t\tcase SnakeKeys.TOGGLE_GAME_OVER:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisGameOver: true,\n\t\t\t};\n\t\tcase SnakeKeys.INCREMENT_SCORE:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tscore: score + 1,\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n","import {\n\tCellType,\n\tgridSize,\n} from '../constants';\n\nimport {\n\tGridAction, GridKeys,\n} from '../actions/types';\n\nimport {\n\tposition,\n} from '../models';\n\nexport interface GridState {\n\tgrid: CellType[][];\n\titem: position;\n}\n\nconst initialGridState: GridState = {\n\tgrid: [],\n\titem: {\n\t\tposX: 0,\n\t\tposY: 0,\n\t},\n};\n\nexport function grid(state = initialGridState, action: GridAction) {\n\tswitch(action.type) {\n\t\tcase GridKeys.SET_CELL:\n\t\t\tconst grid = state.grid;\n\t\t\tgrid[action.position.posY][action.position.posX] = action.cellType;\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tgrid: grid,\n\t\t\t};\n\t\tcase GridKeys.INIT_GRID:\n\t\t\tconst initGrid = Array.from(Array(gridSize[0])).map((_1, i) => {\n\t\t\t\treturn Array.from(Array(gridSize[1])).map((_2, j) => {\n\t\t\t\t\tif(i === action.head.posY && j === action.head.posX) {\n\t\t\t\t\t\treturn CellType.CELL_SNAKE_HEAD;\n\t\t\t\t\t}\n\t\t\t\t\treturn CellType.CELL_BLANK;\n\t\t\t\t});\n\t\t\t});\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tgrid: initGrid,\n\t\t\t};\n\t\tcase GridKeys.RANDOM_PUT_ITEM:\n\t\t\tconst newGrid = state.grid;\n\t\t\tlet randomPosX = 0;\n\t\t\tlet randomPosY = 0;\n\t\t\twhile(true){\n\t\t\t\trandomPosY = Math.floor(Math.random() * gridSize[0]);\n\t\t\t\trandomPosX = Math.floor(Math.random() * gridSize[1]);\n\t\t\t\tif(newGrid[randomPosY][randomPosX] === CellType.CELL_BLANK){\n\t\t\t\t\tnewGrid[randomPosY][randomPosX] = CellType.CELL_SNAKE_ITEM;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tgrid: newGrid,\n\t\t\t\titem: {\n\t\t\t\t\tposX: randomPosX,\n\t\t\t\t\tposY: randomPosY,\n\t\t\t\t},\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n","import {\n\tcombineReducers,\n} from 'redux';\n\nimport {\n\tsnake,\n\tSnakeState,\n} from './SnakeReducer';\n\nimport {\n\tgrid,\n\tGridState,\n} from './GridReducer';\n\nexport interface State {\n\tsnake: SnakeState;\n\tgrid: GridState;\n}\n\nexport const reducers = combineReducers<State>({\n\tsnake,\n\tgrid,\n});\n","import * as React from 'react';\n\nimport {\n\tGridContainer,\n} from './containers';\n\nimport {\n\tcreateStore,\n\tapplyMiddleware,\n} from 'redux';\n\nimport {\n\tProvider,\n} from 'react-redux';\n\nimport thunk from 'redux-thunk';\n\nimport {\n\treducers,\n} from './reducers';\n\nimport './App.css';\n\nexport class App extends React.Component {\n\n\tpublic render() {\n\t\treturn (\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\tflexDirection: 'row',\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<div>\n\t\t\t\t\t<Provider\n\t\t\t\t\t\tstore={createStore(reducers, applyMiddleware(thunk))}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t\t<GridContainer/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Provider>\n\t\t\t\t\t<Provider\n\t\t\t\t\t\tstore={createStore(reducers, applyMiddleware(thunk))}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t\t<GridContainer/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Provider>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<Provider\n\t\t\t\t\t\tstore={createStore(reducers, applyMiddleware(thunk))}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t\t<GridContainer/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Provider>\n\t\t\t\t\t<Provider\n\t\t\t\t\t\tstore={createStore(reducers, applyMiddleware(thunk))}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t\t<GridContainer/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Provider>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\n\nimport {\n\tApp,\n} from './App';\n\nReactDOM.render(\n\t<App />,\n\tdocument.getElementById('root'),\n);\n"],"sourceRoot":""}