{"version":3,"sources":["actions/types/HandActionTypes.ts","actions/types/DeckActionTypes.ts","selectors/DeckSelector.ts","selectors/HandSelector.ts","actions/HandAction.ts","actions/DeckAction.ts","reducers/HandReducer.ts","helpers/trumpCards.ts","reducers/DeckReducer.ts","reducers/index.ts","helpers/array.ts","containers/HandContainerStyle.ts","components/FieldDropAreaComponent.tsx","containers/HandContainer.tsx","containers/DeckContainer.tsx","App.tsx","index.tsx"],"names":["HandKeys","DeckKeys","getCardsOfDeck","createSelector","state","deck","cards","getState","hand","getCardsOfHand","getDraggingTarget","draggingTarget","drawCardIfCould","dispatch","card","length","couldDrawCard","topCard","type","DRAW_CARD","POP_DECK","discardCard","targetIndex","DISCARD_CARD","draggingCardEnd","DRAGGING_CARD_END","dragCard","DRAGGING_CARD_START","draggingCardStart","dropCard","direction","initializeDeck","INIT_DECK","shuffleDeck","SHUFFLE_DECK","initialHandState","Suits","SPADE","icon","color","DIAMOND","HEART","CLUB","trumpNumbers","newTrumpDeck","map","suitName","trumpNumber","i","name","concat","category","subCategory","reduce","a","b","initialDeckState","reducers","combineReducers","arguments","undefined","action","Object","objectSpread","slice","array","Array","from","_1","rand","Math","floor","random","temp","styles","display","flexDirection","justifyContent","hand_card","width","height","border","borderRadius","backgroundColor","marginRight","userSelect","FieldDropAreaComponent","_React$Component","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","hoveringDirection","onDrop","bind","assertThisInitialized","onDragOver","onDragLeave","inherits","createClass","key","value","event","preventDefault","setState","_this2","points","centerPoint","dragAreaSize","react","style","opacity","_","fill","React","HandComponent","_this$props","FieldDropAreaComponent_FieldDropAreaComponent","onClick","e","draggable","onDragStart","onDragEnd","HandContainer","connect","bindActionCreators","DeckComponent","DeckContainer","App","apply","es","store","createStore","applyMiddleware","thunk","className","ReactDOM","render","react_default","createElement","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.2a242261.chunk.js","sourcesContent":["import {\n\tAction,\n} from 'redux';\n\nimport {\n\tCard,\n} from '../../models';\n\nexport enum HandKeys {\n\tDRAW_CARD = 'DRAW_CARD',\n\tDISCARD_CARD = 'DISCARD_CARD',\n\tDRAGGING_CARD_START = 'DRAGGING_CARD_START',\n\tDRAGGING_CARD_END = 'DRAGGING_CARD_END',\n}\n\nexport interface drawCardAction extends Action {\n\ttype: HandKeys.DRAW_CARD;\n\tcard: Card;\n}\n\nexport interface discardCardAction extends Action {\n\ttype: HandKeys.DISCARD_CARD;\n\ttargetIndex: number;\n}\n\nexport interface draggingCardStartAction extends Action {\n\ttype: HandKeys.DRAGGING_CARD_START;\n\ttargetIndex: number;\n}\n\nexport interface draggingCardEndAction extends Action {\n\ttype: HandKeys.DRAGGING_CARD_END;\n}\n\nexport type HandAction = (\n\t| drawCardAction\n\t| discardCardAction\n\t| draggingCardEndAction\n\t| draggingCardStartAction\n);\n","export enum DeckKeys {\n\tINIT_DECK = 'INIT_DECK',\n\tSHUFFLE_DECK = 'SHUFFLE_DECK',\n\tPOP_DECK = 'POP_DECK',\n}\n\nexport interface InitializeDeckAction {\n\ttype: DeckKeys.INIT_DECK;\n}\n\nexport interface ShuffleDeckAction {\n\ttype: DeckKeys.SHUFFLE_DECK;\n}\n\nexport interface PopDeckAction {\n\ttype: DeckKeys.POP_DECK;\n}\n\nexport type DeckAction = (\n\t| InitializeDeckAction\n\t| ShuffleDeckAction\n\t| PopDeckAction\n);\n","import {\n\tcreateSelector,\n} from 'reselect';\n\nimport {\n\tState,\n} from '../reducers';\n\nconst getState = (state: State) => {\n\treturn state.deck;\n};\n\nexport const getCardsOfDeck = createSelector([\n\tgetState,\n], (state) => {\n\treturn state.cards;\n});\n","import {\n\tcreateSelector,\n} from 'reselect';\n\nimport {\n\tState,\n} from '../reducers';\n\nconst getState = (state: State) => {\n\treturn state.hand;\n};\n\nexport const getCardsOfHand = createSelector([\n\tgetState,\n], (state) => {\n\treturn state.cards;\n});\n\nexport const getDraggingTarget = createSelector([\n\tgetState,\n], (state) => {\n\treturn state.draggingTarget;\n});\n","import {\n\tDispatch,\n} from 'redux';\n\nimport {\n\tHandKeys,\n\tdrawCardAction,\n\tdiscardCardAction,\n\tdraggingCardStartAction,\n\tdraggingCardEndAction,\n} from './types';\n\nimport {\n\tCard,\n} from '../models';\n\nimport {\n\tgetCardsOfDeck,\n\tgetDraggingTarget,\n} from '../selectors';\n\nimport {\n\tState,\n} from '../reducers';\n\nimport {\n\tpopDeck,\n} from '../actions';\n\nfunction drawCard(card: Card): drawCardAction {\n\treturn {\n\t\ttype: HandKeys.DRAW_CARD,\n\t\tcard: card,\n\t};\n}\n\nfunction couldDrawCard(state: State) {\n\tconst deck = getCardsOfDeck(state);\n\treturn deck.length > 0;\n}\n\nexport function drawCardIfCould() {\n\treturn (dispatch: Dispatch<any>, getState: () => State) => {\n\t\tconst state = getState();\n\t\tif(couldDrawCard(state)) {\n\t\t\tconst topCard = getCardsOfDeck(state)[0];\n\t\t\tdispatch(drawCard(topCard));\n\t\t\tdispatch(popDeck());\n\t\t}\n\t};\n}\n\nexport function discardCard(targetIndex: number): discardCardAction {\n\treturn {\n\t\ttype: HandKeys.DISCARD_CARD,\n\t\ttargetIndex: targetIndex,\n\t};\n}\n\nfunction draggingCardStart(targetIndex: number): draggingCardStartAction {\n\treturn {\n\t\ttype: HandKeys.DRAGGING_CARD_START,\n\t\ttargetIndex: targetIndex,\n\t};\n}\n\nexport function draggingCardEnd(): draggingCardEndAction {\n\treturn {\n\t\ttype: HandKeys.DRAGGING_CARD_END,\n\t};\n}\n\nexport function dragCard(targetIndex: number) {\n\treturn (dispatch: Dispatch<any>) => {\n\t\tdispatch(draggingCardStart(targetIndex));\n\t};\n}\n\nexport function dropCard(direction: number) {\n\treturn (dispatch: Dispatch<any>, getState: () => State) => {\n\t\tconst draggingTarget = getDraggingTarget(getState());\n\t\tif(draggingTarget === null) {\n\t\t\treturn;\n\t\t}\n\t\tdispatch(discardCard(draggingTarget));\n\t\tdispatch(draggingCardEnd());\n\t};\n}\n","import {\n\tDeckKeys,\n\tInitializeDeckAction,\n\tShuffleDeckAction,\n\tPopDeckAction,\n} from './types';\n\nexport function initializeDeck(): InitializeDeckAction {\n\treturn {\n\t\ttype: DeckKeys.INIT_DECK,\n\t};\n}\n\nexport function shuffleDeck(): ShuffleDeckAction {\n\treturn {\n\t\ttype: DeckKeys.SHUFFLE_DECK,\n\t};\n}\n\nexport function popDeck(): PopDeckAction {\n\treturn {\n\t\ttype: DeckKeys.POP_DECK,\n\t};\n}\n","import {\n\tCard,\n} from '../models';\n\nimport {\n\tHandAction,\n\tHandKeys,\n} from '../actions';\n\n\nexport interface HandState {\n\tcards: Card[];\n\tdraggingTarget: number | null;\n}\n\nconst initialHandState: HandState = {\n\tcards: [],\n\tdraggingTarget: null,\n};\n\nexport function hand(state = initialHandState, action: HandAction) {\n\tconst {\n\t\tcards,\n\t} = state;\n\tswitch(action.type) {\n\t\tcase HandKeys.DRAW_CARD:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcards: cards.concat(action.card),\n\t\t\t};\n\t\tcase HandKeys.DISCARD_CARD:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcards: cards.slice(0, action.targetIndex).concat(cards.slice(action.targetIndex + 1)),\n\t\t\t};\n\t\tcase HandKeys.DRAGGING_CARD_START:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tdraggingTarget: action.targetIndex,\n\t\t\t};\n\t\tcase HandKeys.DRAGGING_CARD_END:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tdraggingTarget: null,\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n","import {\n\tCard,\n} from '../models';\n\nexport interface Suit {\n\ticon: string;\n\tcolor: string;\n}\n\nexport const SuitNames = [\n\t'SPADE',\n\t'DIAMOND',\n\t'HEART',\n\t'CLUB',\n];\n\nexport const Suits: {[name: string]: Suit} = {\n\tSPADE: {\n\t\ticon: '♠',\n\t\tcolor: 'black',\n\t},\n\tDIAMOND: {\n\t\ticon: '◆',\n\t\tcolor: 'red',\n\t},\n\tHEART: {\n\t\ticon: '♥',\n\t\tcolor: 'red',\n\t},\n\tCLUB: {\n\t\ticon: '♣',\n\t\tcolor: 'black',\n\t},\n};\n\nexport const trumpNumbers = [\n\t'A',\n\t'2',\n\t'3',\n\t'4',\n\t'5',\n\t'6',\n\t'7',\n\t'8',\n\t'9',\n\t'10',\n\t'J',\n\t'Q',\n\t'K',\n];\n\n\nexport const newTrumpDeck: Card[] = (\n\tSuitNames.map((suitName) => {\n\t\treturn (trumpNumbers.map((trumpNumber, i) => {\n\t\t\treturn {\n\t\t\t\tname: `${Suits[suitName].icon} ${trumpNumber}`,\n\t\t\t\tcategory: suitName,\n\t\t\t\tsubCategory: i + 1,\n\t\t\t} as Card;\n\t\t}));\n\t}).reduce((a: Card[], b: Card[]) => {\n\t\treturn a.concat(b);\n\t})\n);\n","import {\n\tCard,\n} from '../models';\n\nimport {\n\tDeckAction,\n\tDeckKeys,\n} from '../actions';\n\nimport {\n\tshuffle,\n\tnewTrumpDeck,\n} from '../helpers';\n\nexport interface DeckState {\n\tcards: Card[];\n}\n\nconst initialDeckState: DeckState = {\n\tcards: [],\n};\n\nexport function deck(state = initialDeckState, action: DeckAction) {\n\tconst {\n\t\tcards,\n\t} = state;\n\tswitch(action.type) {\n\t\tcase DeckKeys.POP_DECK:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcards: cards.slice(1),\n\t\t\t};\n\t\tcase DeckKeys.SHUFFLE_DECK:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcards: shuffle(cards),\n\t\t\t};\n\t\tcase DeckKeys.INIT_DECK:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcards: newTrumpDeck,\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n","import {\n\tcombineReducers,\n} from 'redux';\n\nimport {\n\tHandState,\n\thand,\n} from './HandReducer';\n\nimport {\n\tDeckState,\n\tdeck,\n} from './DeckReducer';\n\nexport interface State {\n\thand: HandState;\n\tdeck: DeckState;\n}\n\nexport const reducers = combineReducers<State>({\n\thand,\n\tdeck,\n});\n","export function shuffle<T>(array: T[]): T[] {\n\tArray.from(Array(array.length)).map((_1, i) => {\n\t\tconst rand = Math.floor(Math.random() * i);\n\t\tconst temp = array[i];\n\t\tarray[i] = array[rand];\n\t\tarray[rand] = temp;\n\t});\n\treturn array;\n}\n","import {\n\tCSSProperties,\n} from 'react';\n\nexport const styles: {[name: string]: CSSProperties} = {\n\thand: {\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'row',\n\t\tjustifyContent: 'flex-start',\n\t},\n\thand_card: {\n\t\twidth: '100px',\n\t\theight: '150px',\n\t\tborder: '1px solid grey',\n\t\tborderRadius: '10px',\n\t\tbackgroundColor: 'white',\n\t\tmarginRight: '10px',\n\t\tuserSelect: 'none',\n\t},\n};\n","import * as React from 'react';\n\nimport {\n\tdropCard,\n} from '../actions';\n\nimport {\n\tgetDraggingTarget,\n} from '../selectors';\n\ninterface ComponentProps {\n\tdraggingTarget: ReturnType<typeof getDraggingTarget>;\n\n\tdropCard: typeof dropCard;\n}\n\ninterface ComponentState {\n\thoveringDirection: number;\n}\n\nexport class FieldDropAreaComponent extends React.Component<ComponentProps, ComponentState> {\n\tconstructor(props: ComponentProps) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thoveringDirection: -1,\n\t\t};\n\t\tthis.onDrop = this.onDrop.bind(this);\n\t\tthis.onDragOver = this.onDragOver.bind(this);\n\t\tthis.onDragLeave = this.onDragLeave.bind(this);\n\t}\n\n\tprivate onDragOver(event: React.DragEvent, direction: number) {\n\t\tevent.preventDefault();\n\t\tthis.setState({\n\t\t\thoveringDirection: direction,\n\t\t});\n\t}\n\n\tprivate onDragLeave(event: React.DragEvent) {\n\t\tevent.preventDefault();\n\t\tthis.setState({\n\t\t\thoveringDirection: -1,\n\t\t});\n\t}\n\n\tprivate onDrop(direction: number) {\n\t\tthis.setState({\n\t\t\thoveringDirection: -1,\n\t\t});\n\t\tthis.props.dropCard(direction);\n\t}\n\n\tpublic render() {\n\t\tconst {\n\t\t\thoveringDirection,\n\t\t} = this.state;\n\n\t\tconst {\n\t\t\tdraggingTarget,\n\t\t} = this.props;\n\n\t\tconst dragAreaSize = 200;\n\t\tconst points = [\n\t\t\t`0,0`,\n\t\t\t`${dragAreaSize},0`,\n\t\t\t`${dragAreaSize},${dragAreaSize}`,\n\t\t\t`0,${dragAreaSize}`,\n\t\t\t`0,0`,\n\t\t];\n\t\tconst centerPoint = `${dragAreaSize/2},${dragAreaSize/2}`;\n\n\t\treturn (\n\t\t\t<svg\n\t\t\t\twidth={dragAreaSize}\n\t\t\t\theight={dragAreaSize}\n\t\t\t\tstyle={{\n\t\t\t\t\topacity: draggingTarget === null ? 0 : 1,\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{\n\t\t\t\t\tArray.from(Array(4)).map((_, i) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<polygon\n\t\t\t\t\t\t\t\tpoints={`${points[i]} ${points[i+1]} ${centerPoint}`}\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\tfill: hoveringDirection === i ? 'green' : 'grey',\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\t\tonDragOver={(event: React.DragEvent) => {this.onDragOver(event, i);}}\n\t\t\t\t\t\t\t\tonDrop={() => this.onDrop(i)}\n\t\t\t\t\t\t\t\tonDragLeave={this.onDragLeave}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t);\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t</svg>\n\t\t);\n\t}\n}\n","import * as React from 'react';\n\nimport {\n\tDispatch,\n\tAnyAction,\n\tbindActionCreators,\n} from 'redux';\n\nimport {\n\tconnect,\n} from 'react-redux';\n\nimport {\n\tgetCardsOfHand, getDraggingTarget,\n} from '../selectors';\n\nimport {\n\tdrawCardIfCould,\n\tdiscardCard,\n\tdragCard,\n\tdropCard,\n\tdraggingCardEnd,\n} from '../actions';\n\nimport {\n\tState,\n} from '../reducers';\n\nimport {\n\tstyles,\n} from './HandContainerStyle';\n\nimport {\n\tFieldDropAreaComponent,\n} from '../components/FieldDropAreaComponent';\n\ninterface ComponentProps {\n\thand: ReturnType<typeof getCardsOfHand>;\n\tdraggingTarget: ReturnType<typeof getDraggingTarget>;\n\n\tdrawCardIfCould: typeof drawCardIfCould;\n\tdiscardCard: typeof discardCard;\n\tdraggingCardEnd: typeof draggingCardEnd;\n\tdragCard: typeof dragCard;\n\tdropCard: typeof dropCard;\n}\n\nclass HandComponent extends React.Component<ComponentProps> {\n\tpublic render() {\n\t\tconst {\n\t\t\thand,\n\t\t\tdraggingTarget,\n\t\t} = this.props;\n\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<FieldDropAreaComponent\n\t\t\t\t\t{...this.props}\n\t\t\t\t/>\n\t\t\t\t<div\n\t\t\t\t\tstyle={styles.hand}\n\t\t\t\t>\n\t\t\t\t\t{\n\t\t\t\t\t\tdraggingTarget === null ?\n\t\t\t\t\t\t<p\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t...styles.hand_card,\n\t\t\t\t\t\t\t\tbackgroundColor: 'blue',\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tonClick={this.props.drawCardIfCould}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{'draw'}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t:\n\t\t\t\t\t\t<p\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t...styles.hand_card,\n\t\t\t\t\t\t\t\tbackgroundColor: 'grey',\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tonDragOver={(event: React.DragEvent) => {event.preventDefault();}}\n\t\t\t\t\t\t\tonDrop={() => this.props.dropCard(-1)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{'discard'}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t}\n\t\t\t\t\t{\n\t\t\t\t\t\thand.map((e, i) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<p\n\t\t\t\t\t\t\t\t\tstyle={styles.hand_card}\n\t\t\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\t\t\tdraggable={true}\n\t\t\t\t\t\t\t\t\tonDragStart={() => this.props.dragCard(i)}\n\t\t\t\t\t\t\t\t\tonDragEnd={this.props.draggingCardEnd}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{`${e.name}`}\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n\nfunction mapStateToProps(state: State) {\n\treturn {\n\t\thand: getCardsOfHand(state),\n\t\tdraggingTarget: getDraggingTarget(state),\n\t};\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>) {\n\treturn bindActionCreators({\n\t\tdrawCardIfCould,\n\t\tdiscardCard,\n\t\tdraggingCardEnd,\n\t\tdragCard,\n\t\tdropCard,\n\t}, dispatch);\n}\n\nexport const HandContainer = connect(mapStateToProps, mapDispatchToProps)(HandComponent);\n","import * as React from 'react';\n\nimport {\n\tDispatch,\n\tAnyAction,\n\tbindActionCreators,\n} from 'redux';\n\nimport {\n\tconnect,\n} from 'react-redux';\n\nimport {\n\tgetCardsOfDeck,\n} from '../selectors';\n\nimport {\n\tState,\n} from '../reducers';\n\nimport {\n\tinitializeDeck,\n\tshuffleDeck,\n} from '../actions';\n\ninterface ComponentProps {\n\tdeck: ReturnType<typeof getCardsOfDeck>;\n\n\tinitializeDeck: typeof initializeDeck;\n\tshuffleDeck: typeof shuffleDeck;\n}\n\nclass DeckComponent extends React.Component<ComponentProps> {\n\tpublic componentDidMount() {\n\t\tthis.props.initializeDeck();\n\t\tthis.props.shuffleDeck();\n\t}\n\n\tpublic render() {\n\t\treturn (\n\t\t\t<div/>\n\t\t);\n\t}\n}\n\nfunction mapStateToProps(state: State) {\n\treturn {\n\t\tdeck: getCardsOfDeck(state),\n\t};\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>) {\n\treturn bindActionCreators({\n\t\tinitializeDeck,\n\t\tshuffleDeck,\n\t}, dispatch);\n}\n\nexport const DeckContainer = connect(mapStateToProps, mapDispatchToProps)(DeckComponent);\n","import * as React from 'react';\n\nimport {\n\tcreateStore,\n\tapplyMiddleware,\n} from 'redux';\n\nimport {\n\tProvider,\n} from 'react-redux';\n\nimport thunk from 'redux-thunk';\n\nimport {\n\treducers,\n} from './reducers';\n\nimport {\n\tDeckContainer,\n\tHandContainer,\n} from './containers';\n\nimport './App.css';\n\nexport class App extends React.Component {\n\n\tpublic render() {\n\t\treturn (\n\t\t\t<Provider\n\t\t\t\tstore={createStore(reducers, applyMiddleware(thunk))}\n\t\t\t>\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<DeckContainer />\n\t\t\t\t\t<HandContainer/>\n\t\t\t\t</div>\n\t\t\t</Provider>\n\t\t);\n\t}\n}\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\n\nimport {\n\tApp,\n} from './App';\n\nReactDOM.render(\n\t<App />,\n\tdocument.getElementById('root'),\n);\n"],"sourceRoot":""}