{"version":3,"sources":["models/index.ts","actions/types/SnakeActionTypes.ts","actions/types/GridActionTypes.ts","reducers/SnakeReducer.ts","constants/grid.ts","reducers/GridReducer.ts","reducers/index.ts","selectors/SnakeSelector.ts","selectors/GridSelector.ts","actions/SnakeActions.ts","actions/GridActions.ts","containers/GridContainer.tsx","containers/KeyboardHandlerContainer.tsx","App.tsx","index.tsx"],"names":["__webpack_require__","SnakeKeys","GridKeys","initialSnakeState","head","posX","posY","tails","CellType","gridSize","initialGridState","grid","item","reducers","combineReducers","snake","state","arguments","length","undefined","action","type","MOVE_HEAD","Object","objectSpread","targetPos","POP_TAILS","slice","PUSH_TAILS","concat","SET_CELL","position","cellType","INIT_GRID","initGrid","Array","from","map","_1","i","_2","j","CELL_SNAKE_HEAD","CELL_BLANK","RANDOM_PUT_ITEM","newGrid","randomPosX","randomPosY","Math","floor","random","CELL_SNAKE_ITEM","console","log","getState","getPos","createSelector","getTails","getGrid","getItem","pushTails","moveHead","keydownMoveHead","prevPos","endOfTail","dispatch","setCell","CELL_SNAKE_BODY","keydownMoveHeadIfNeeded","keyCode","couldMoveHead","targetCellType","randomPutItem","keydownMoveAndStretch","initializeGrid","GridComponent","this","props","_this$props","react","style","width","height","background","top","left","e","key","React","GridContainer","connect","bindActionCreators","KeyboardHandlerComponent","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onKeyDown","bind","assertThisInitialized","ev","window","addEventListener","removeEventListener","KeyboardHandlerContainer","App","_React$Component","apply","inherits","createClass","value","className","ReactDOM","render","react_default","a","createElement","es","store","createStore","applyMiddleware","thunk","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.11105b17.chunk.js","sourcesContent":["export * from './position';\n","import {\n\tAction,\n} from 'redux';\n\nimport {\n\tposition,\n} from '../../models';\n\nexport enum SnakeKeys {\n\tMOVE_HEAD = 'MOVE_HEAD',\n\tPOP_TAILS = 'POP_TAILS',\n\tPUSH_TAILS = 'PUSH_TAILS',\n}\n\nexport interface MoveHeadAction extends Action {\n\ttype: SnakeKeys.MOVE_HEAD;\n\ttargetPos: position;\n}\n\nexport interface PopTailsAction extends Action {\n\ttype: SnakeKeys.POP_TAILS;\n}\n\nexport interface PushTailsAction extends Action {\n\ttype: SnakeKeys.PUSH_TAILS;\n\ttargetPos: position;\n}\n\nexport type SnakeAction = (\n\t| MoveHeadAction\n\t| PopTailsAction\n\t| PushTailsAction\n);\n","import {\n\tAction,\n} from 'redux';\n\nimport {\n\tposition,\n} from '../../models';\n\nimport {\n\tCellType,\n} from '../../constants';\n\nexport enum GridKeys {\n\tSET_CELL = 'SET_CELL',\n\tINIT_GRID = 'INIT_GRID',\n\tRANDOM_PUT_ITEM = 'RANDOM_PUT_ITEM',\n}\n\nexport interface setCellAction extends Action {\n\ttype: GridKeys.SET_CELL;\n\tposition: position;\n\tcellType: CellType;\n}\n\nexport interface initializeGridAction extends Action {\n\ttype: GridKeys.INIT_GRID;\n\thead: position;\n}\n\nexport interface randomPutItemAction extends Action {\n\ttype: GridKeys.RANDOM_PUT_ITEM;\n}\n\nexport type GridAction = (\n\t| setCellAction\n\t| initializeGridAction\n\t| randomPutItemAction\n);\n","import {\n\tSnakeAction,\n\tSnakeKeys,\n} from '../actions/types';\n\nimport {\n\tposition,\n} from '../models';\n\nexport interface SnakeState {\n\thead: position;\n\ttails: position[];\n}\n\nconst initialSnakeState: SnakeState = {\n\thead: {\n\t\tposX: 0,\n\t\tposY: 0,\n\t},\n\ttails: [],\n};\n\nexport function snake(state = initialSnakeState, action: SnakeAction) {\n\tconst {\n\t\ttails,\n\t} = state;\n\n\tswitch(action.type) {\n\t\tcase SnakeKeys.MOVE_HEAD:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\thead: action.targetPos,\n\t\t\t};\n\t\tcase SnakeKeys.POP_TAILS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\ttails: tails.slice(1),\n\t\t\t};\n\t\tcase SnakeKeys.PUSH_TAILS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\ttails: tails.concat(action.targetPos),\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n","export const gridSize = [20, 20];\nexport const cellSize = 10;\n\nexport enum CellType {\n\tCELL_BLANK = 0,\n\tCELL_SNAKE_HEAD,\n\tCELL_SNAKE_BODY,\n\tCELL_SNAKE_ITEM,\n}\n","import {\n\tCellType,\n\tgridSize,\n} from '../constants';\n\nimport {\n\tGridAction, GridKeys,\n} from '../actions/types';\n\nimport {\n\tposition,\n} from '../models';\n\nexport interface GridState {\n\tgrid: CellType[][];\n\titem: position;\n}\n\nconst initialGridState: GridState = {\n\tgrid: [],\n\titem: {\n\t\tposX: 0,\n\t\tposY: 0,\n\t},\n};\n\nexport function grid(state = initialGridState, action: GridAction) {\n\tswitch(action.type) {\n\t\tcase GridKeys.SET_CELL:\n\t\t\tconst grid = state.grid;\n\t\t\tgrid[action.position.posY][action.position.posX] = action.cellType;\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tgrid: grid,\n\t\t\t};\n\t\tcase GridKeys.INIT_GRID:\n\t\t\tconst initGrid = Array.from(Array(gridSize[0])).map((_1, i) => {\n\t\t\t\treturn Array.from(Array(gridSize[1])).map((_2, j) => {\n\t\t\t\t\tif(i === action.head.posY && j === action.head.posX) {\n\t\t\t\t\t\treturn CellType.CELL_SNAKE_HEAD;\n\t\t\t\t\t}\n\t\t\t\t\treturn CellType.CELL_BLANK;\n\t\t\t\t});\n\t\t\t});\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tgrid: initGrid,\n\t\t\t};\n\t\tcase GridKeys.RANDOM_PUT_ITEM:\n\t\t\tconst newGrid = state.grid;\n\t\t\tlet randomPosX = 0;\n\t\t\tlet randomPosY = 0;\n\t\t\twhile(true){\n\t\t\t\trandomPosY = Math.floor(Math.random() * gridSize[0]);\n\t\t\t\trandomPosX = Math.floor(Math.random() * gridSize[1]);\n\t\t\t\tif(newGrid[randomPosY][randomPosX] === CellType.CELL_BLANK){\n\t\t\t\t\tnewGrid[randomPosY][randomPosX] = CellType.CELL_SNAKE_ITEM;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tconsole.log(newGrid);\n\t\t\treturn {\n\t\t\t\tgrid: newGrid,\n\t\t\t\titem: {\n\t\t\t\t\tposX: randomPosX,\n\t\t\t\t\tposY: randomPosY,\n\t\t\t\t},\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n","import {\n\tcombineReducers,\n} from 'redux';\n\nimport {\n\tsnake,\n\tSnakeState,\n} from './SnakeReducer';\n\nimport {\n\tgrid,\n\tGridState,\n} from './GridReducer';\n\nexport interface State {\n\tsnake: SnakeState;\n\tgrid: GridState;\n}\n\nexport const reducers = combineReducers<State>({\n\tsnake,\n\tgrid,\n});\n","import {\n\tcreateSelector,\n} from 'reselect';\n\nimport {\n\tState,\n} from '../reducers';\n\nconst getState = (state: State) => {\n\treturn state.snake;\n};\n\nexport const getPos = createSelector([\n\tgetState,\n], (state) => {\n\treturn state.head;\n});\n\nexport const getPosX = createSelector([\n\tgetState,\n], (state) => {\n\treturn state.head.posX;\n});\n\nexport const getPosY = createSelector([\n\tgetState,\n], (state) => {\n\treturn state.head.posY;\n});\n\nexport const getTails = createSelector([\n\tgetState,\n], (state) => {\n\treturn state.tails;\n});\n","import {\n\tcreateSelector,\n} from 'reselect';\n\nimport {\n\tState,\n} from '../reducers';\n\nconst getState = (state: State) => {\n\treturn state.grid;\n};\n\nexport const getGrid = createSelector([\n\tgetState,\n], (state) => {\n\treturn state.grid;\n});\n\nexport const getItem = createSelector([\n\tgetState,\n], (state) => {\n\treturn state.item;\n});\n","import {\n\tDispatch,\n\tAnyAction,\n} from 'redux';\n\nimport {\n\tSnakeKeys,\n\tPopTailsAction,\n\tPushTailsAction,\n\tMoveHeadAction,\n} from './types';\n\nimport {\n\tState,\n} from '../reducers';\n\nimport {\n\tposition,\n} from '../models';\n\nimport {\n\tgetPos,\n\tgetTails,\n\tgetGrid,\n} from '../selectors';\n\nimport {\n\trandomPutItem,\n\tsetCell,\n} from '../actions';\n\nimport {\n\tCellType,\n\tgridSize,\n} from '../constants';\n\nfunction popTails(): PopTailsAction {\n\treturn {\n\t\ttype: SnakeKeys.POP_TAILS,\n\t};\n}\n\nfunction pushTails(targetPos: position): PushTailsAction {\n\treturn {\n\t\ttype: SnakeKeys.PUSH_TAILS,\n\t\ttargetPos: targetPos,\n\t};\n}\n\nfunction moveHead(targetPos: position): MoveHeadAction {\n\treturn {\n\t\ttype: SnakeKeys.MOVE_HEAD,\n\t\ttargetPos: targetPos,\n\t};\n}\n\nfunction couldMoveHead(keyCode: number, targetPos: position, state: State) {\n\tif(targetPos.posY < 0 || targetPos.posY >= gridSize[0]) {\n\t\treturn false;\n\t}\n\tif(targetPos.posX < 0 || targetPos.posX >= gridSize[1]) {\n\t\treturn false;\n\t}\n\treturn keyCode >= 37 && keyCode <= 40;\n}\n\nfunction keydownMoveHead(prevPos: position, targetPos: position, endOfTail: position) {\n\treturn (dispatch: Dispatch<AnyAction>) => {\n\t\tdispatch(setCell(targetPos, CellType.CELL_SNAKE_HEAD));\n\t\tdispatch(moveHead(targetPos));\n\t\tif(endOfTail === undefined) {\n\t\t\tdispatch(setCell(prevPos, CellType.CELL_BLANK));\n\t\t}\n\t\telse {\n\t\t\tdispatch(setCell(prevPos, CellType.CELL_SNAKE_BODY));\n\t\t\tdispatch(setCell(endOfTail, CellType.CELL_BLANK));\n\n\t\t\tdispatch(pushTails(prevPos));\n\t\t\tdispatch(popTails());\n\t\t}\n\t};\n}\n\nfunction keydownMoveAndStretch(prevPos: position, targetPos: position) {\n\treturn (dispatch: Dispatch<AnyAction>) => {\n\t\tconsole.log('asdf');\n\t\tdispatch(setCell(prevPos, CellType.CELL_SNAKE_BODY));\n\t\tdispatch(setCell(targetPos, CellType.CELL_SNAKE_HEAD));\n\n\t\tdispatch(moveHead(targetPos));\n\t\tdispatch(pushTails(prevPos));\n\n\t\tdispatch(randomPutItem());\n\t};\n}\n\nexport function keydownMoveHeadIfNeeded(keyCode: number) {\n\treturn (dispatch: Dispatch<any>, getState: () => State) => {\n\t\tconst state = getState();\n\t\tconst prevPos = getPos(state);\n\t\tconst targetPos = (() => {\n\t\t\tswitch(keyCode) {\n\t\t\t\tcase 37:\n\t\t\t\t\treturn {\n\t\t\t\t\t\tposX: prevPos.posX - 1,\n\t\t\t\t\t\tposY: prevPos.posY,\n\t\t\t\t\t};\n\t\t\t\tcase 38:\n\t\t\t\t\treturn {\n\t\t\t\t\t\tposX: prevPos.posX,\n\t\t\t\t\t\tposY: prevPos.posY - 1,\n\t\t\t\t\t};\n\t\t\t\tcase 39:\n\t\t\t\t\treturn {\n\t\t\t\t\t\tposX: prevPos.posX + 1,\n\t\t\t\t\t\tposY: prevPos.posY,\n\t\t\t\t\t};\n\t\t\t\tcase 40:\n\t\t\t\t\treturn {\n\t\t\t\t\t\tposX: prevPos.posX,\n\t\t\t\t\t\tposY: prevPos.posY + 1,\n\t\t\t\t\t};\n\t\t\t\tdefault:\n\t\t\t\t\treturn prevPos;\n\t\t\t}\n\t\t})();\n\n\t\tif(couldMoveHead(keyCode, targetPos, state)) {\n\t\t\tconst targetCellType = getGrid(state)[targetPos.posY][targetPos.posX];\n\t\t\tif(targetCellType === CellType.CELL_BLANK) {\n\t\t\t\tconst endOfTail = getTails(state)[0];\n\t\t\t\tdispatch(keydownMoveHead(prevPos, targetPos, endOfTail));\n\t\t\t}\n\t\t\telse if(targetCellType === CellType.CELL_SNAKE_ITEM) {\n\t\t\t\tdispatch(keydownMoveAndStretch(prevPos, targetPos));\n\t\t\t}\n\t\t}\n\t};\n}\n","import {\n\tsetCellAction,\n\tGridKeys,\n\tinitializeGridAction,\n\trandomPutItemAction,\n} from './types';\n\nimport {\n\tposition,\n} from '../models';\n\nimport {\n\tCellType,\n} from '../constants';\n\nexport function setCell(position: position, cellType: CellType): setCellAction {\n\treturn {\n\t\ttype: GridKeys.SET_CELL,\n\t\tposition: position,\n\t\tcellType: cellType,\n\t};\n}\n\nexport function randomPutItem(): randomPutItemAction {\n\treturn {\n\t\ttype: GridKeys.RANDOM_PUT_ITEM,\n\t};\n}\n\nexport function initializeGrid(head: position): initializeGridAction {\n\treturn {\n\t\ttype: GridKeys.INIT_GRID,\n\t\thead: head,\n\t};\n}\n","import * as React from 'react';\n\nimport {\n\tDispatch,\n\tAnyAction,\n\tbindActionCreators,\n} from 'redux';\n\nimport {\n\tconnect,\n} from 'react-redux';\n\nimport {\n\tState,\n} from '../reducers';\n\nimport {\n\tgetPos,\n\tgetTails,\n\tgetItem,\n} from '../selectors';\n\nimport {\n\tposition,\n} from '../models';\n\nimport {\n\tinitializeGrid,\n\trandomPutItem,\n} from '../actions';\n\ninterface ComponentProps {\n\thead: position;\n\ttails: position[];\n\titem: position;\n\n\tinitializeGrid: typeof initializeGrid;\n\trandomPutItem: typeof randomPutItem;\n}\n\nclass GridComponent extends React.Component<ComponentProps> {\n\tpublic componentDidMount() {\n\t\tconst {\n\t\t\thead,\n\t\t} = this.props;\n\t\tthis.props.initializeGrid(head);\n\t\tthis.props.randomPutItem();\n\t}\n\n\tpublic render() {\n\t\tconst {\n\t\t\thead,\n\t\t\ttails,\n\t\t\titem,\n\t\t} = this.props;\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\twidth: '500px',\n\t\t\t\t\theight: '500px',\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<div\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\t\twidth: '10px',\n\t\t\t\t\t\theight: '10px',\n\t\t\t\t\t\tbackground: 'black',\n\t\t\t\t\t\ttop: head.posY * 10,\n\t\t\t\t\t\tleft: head.posX * 10,\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t\t{tails.map((e, i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\t\t\t\twidth: '10px',\n\t\t\t\t\t\t\t\theight: '10px',\n\t\t\t\t\t\t\t\tbackground: 'grey',\n\t\t\t\t\t\t\t\ttop: e.posY * 10,\n\t\t\t\t\t\t\t\tleft: e.posX * 10,\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t\t<div\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\t\twidth: '10px',\n\t\t\t\t\t\theight: '10px',\n\t\t\t\t\t\tbackground: 'red',\n\t\t\t\t\t\ttop: item.posY * 10,\n\t\t\t\t\t\tleft: item.posX * 10,\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nfunction mapStateToProps(state: State) {\n\treturn {\n\t\thead: getPos(state),\n\t\ttails: getTails(state),\n\t\titem: getItem(state),\n\t};\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>) {\n\treturn bindActionCreators({\n\t\tinitializeGrid: initializeGrid,\n\t\trandomPutItem: randomPutItem,\n\t}, dispatch);\n}\nexport const GridContainer = connect(mapStateToProps, mapDispatchToProps)(GridComponent);\n","import * as React from 'react';\n\nimport {\n\tAnyAction,\n\tDispatch,\n\tbindActionCreators,\n} from 'redux';\n\nimport {\n\tconnect,\n} from 'react-redux';\n\nimport {\n\tkeydownMoveHeadIfNeeded,\n\tinitializeGrid,\n} from '../actions';\n\nimport {\n\tState,\n} from '../reducers';\n\ninterface ComponentProps {\n\tkeydownMoveHeadIfNeeded: typeof keydownMoveHeadIfNeeded;\n\tinitializeGrid: typeof initializeGrid;\n}\n\nclass KeyboardHandlerComponent extends React.Component<ComponentProps> {\n\tconstructor(props: ComponentProps) {\n\t\tsuper(props);\n\t\tthis.onKeyDown = this.onKeyDown.bind(this);\n\t}\n\n\tprivate onKeyDown(ev: KeyboardEvent) {\n\t\tthis.props.keydownMoveHeadIfNeeded(ev.keyCode);\n\t}\n\n\tpublic componentDidMount() {\n\t\twindow.addEventListener('keydown', this.onKeyDown);\n\t}\n\n\tpublic componentWillUnmount() {\n\t\twindow.removeEventListener('keydown', this.onKeyDown);\n\t}\n\n\tpublic render() {\n\t\treturn (\n\t\t\t<div/>\n\t\t);\n\t}\n}\n\nfunction mapStateToProps(state: State) {\n\treturn {};\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>) {\n\treturn bindActionCreators({\n\t\tkeydownMoveHeadIfNeeded: keydownMoveHeadIfNeeded,\n\t\tinitializeGrid: initializeGrid,\n\t}, dispatch);\n}\n\nexport const KeyboardHandlerContainer = connect(mapStateToProps, mapDispatchToProps)(KeyboardHandlerComponent);\n","import * as React from 'react';\n\nimport {\n\tKeyboardHandlerContainer,\n\tGridContainer,\n} from './containers';\n\nimport './App.css';\n\nexport class App extends React.Component {\n\tpublic render() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<KeyboardHandlerContainer/>\n\t\t\t\t<GridContainer/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\n\nimport {\n\tcreateStore,\n\tapplyMiddleware,\n} from 'redux';\n\nimport {\n\tProvider,\n} from 'react-redux';\n\nimport thunk from 'redux-thunk';\n\nimport './index.css';\n\nimport {\n\treducers,\n} from './reducers';\n\nimport {\n\tApp,\n} from './App';\n\nReactDOM.render(\n\t<Provider\n\t\tstore={createStore(reducers, applyMiddleware(thunk))}\n\t>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root'),\n);\n"],"sourceRoot":""}