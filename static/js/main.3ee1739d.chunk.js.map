{"version":3,"sources":["models/index.ts","actions/types/SnakeActionTypes.ts","selectors/SnakeSelector.ts","selectors/GridSelector.ts","actions/types/GridActionTypes.ts","constants/grid.ts","actions/SnakeActions.ts","actions/GridActions.ts","containers/GridContainer.tsx","containers/KeyboardHandlerContainer.tsx","reducers/SnakeReducer.ts","reducers/GridReducer.ts","reducers/index.ts","App.tsx","index.tsx"],"names":["__webpack_require__","SnakeKeys","getState","state","snake","getPos","createSelector","head","getTails","posX","posY","tails","getGameStatus","isGameOver","getScore","score","grid","getGrid","getItem","item","getBlock","block","GridKeys","CellType","gridSize","pushTails","targetPos","type","PUSH_TAILS","moveHead","MOVE_HEAD","toggleGameOver","TOGGLE_GAME_OVER","keydownMoveHead","prevPos","endOfTail","dispatch","setCell","CELL_SNAKE_HEAD","undefined","CELL_BLANK","CELL_SNAKE_BODY","POP_TAILS","keydownMoveAndStretch","randomPutItem","INCREMENT_SCORE","keydownMoveHeadIfNeeded","keyCode","couldMoveHead","targetCellType","CELL_SNAKE_ITEM","position","cellType","SET_CELL","RANDOM_PUT_ITEM","initializeGrid","INIT_GRID","GridComponent","this","props","_this$props","react","style","width","concat","height","border","KeyboardHandlerContainer","background","top","left","map","e","i","key","color","fontWeight","React","GridContainer","connect","bindActionCreators","KeyboardHandlerComponent","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onKeyDown","bind","assertThisInitialized","ev","window","addEventListener","removeEventListener","initialSnakeState","initialGridState","reducers","combineReducers","arguments","length","action","objectSpread","slice","initGrid","Array","from","_1","_2","j","newGrid","prevBlock","randomItemPosX","randomItemPosY","randomBlockPosX","randomBlockPosY","Math","floor","random","CELL_SNAKE_BLOCK","App","_React$Component","apply","inherits","createClass","value","display","flexDirection","es","store","createStore","applyMiddleware","thunk","className","ReactDOM","render","react_default","a","createElement","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.3ee1739d.chunk.js","sourcesContent":["export * from './position';\n","import {\n\tAction,\n} from 'redux';\n\nimport {\n\tposition,\n} from '../../models';\n\nexport enum SnakeKeys {\n\tMOVE_HEAD = 'MOVE_HEAD',\n\tPOP_TAILS = 'POP_TAILS',\n\tPUSH_TAILS = 'PUSH_TAILS',\n\tTOGGLE_GAME_OVER = 'TOGGLE_GAME_OVER',\n\tINCREMENT_SCORE = 'INCREMENT_SCORE',\n}\n\nexport interface MoveHeadAction extends Action {\n\ttype: SnakeKeys.MOVE_HEAD;\n\ttargetPos: position;\n}\n\nexport interface PopTailsAction extends Action {\n\ttype: SnakeKeys.POP_TAILS;\n}\n\nexport interface PushTailsAction extends Action {\n\ttype: SnakeKeys.PUSH_TAILS;\n\ttargetPos: position;\n}\n\nexport interface ToggleGameOverAction extends Action {\n\ttype: SnakeKeys.TOGGLE_GAME_OVER;\n}\n\nexport interface IncrementScoreAction extends Action {\n\ttype: SnakeKeys.INCREMENT_SCORE;\n}\n\nexport type SnakeAction = (\n\t| MoveHeadAction\n\t| PopTailsAction\n\t| PushTailsAction\n\t| ToggleGameOverAction\n\t| IncrementScoreAction\n);\n","import {\n\tcreateSelector,\n} from 'reselect';\n\nimport {\n\tState,\n} from '../reducers';\n\nconst getState = (state: State) => {\n\treturn state.snake;\n};\n\nexport const getPos = createSelector([\n\tgetState,\n], (state) => {\n\treturn state.head;\n});\n\nexport const getPosX = createSelector([\n\tgetState,\n], (state) => {\n\treturn state.head.posX;\n});\n\nexport const getPosY = createSelector([\n\tgetState,\n], (state) => {\n\treturn state.head.posY;\n});\n\nexport const getTails = createSelector([\n\tgetState,\n], (state) => {\n\treturn state.tails;\n});\n\nexport const getGameStatus = createSelector([\n\tgetState,\n], (state) => {\n\treturn state.isGameOver;\n});\n\nexport const getScore = createSelector([\n\tgetState,\n], (state) => {\n\treturn state.score;\n});\n","import {\n\tcreateSelector,\n} from 'reselect';\n\nimport {\n\tState,\n} from '../reducers';\n\nconst getState = (state: State) => {\n\treturn state.grid;\n};\n\nexport const getGrid = createSelector([\n\tgetState,\n], (state) => {\n\treturn state.grid;\n});\n\nexport const getItem = createSelector([\n\tgetState,\n], (state) => {\n\treturn state.item;\n});\n\nexport const getBlock = createSelector([\n\tgetState,\n], (state) => {\n\treturn state.block;\n});\n","import {\n\tAction,\n} from 'redux';\n\nimport {\n\tposition,\n} from '../../models';\n\nimport {\n\tCellType,\n} from '../../constants';\n\nexport enum GridKeys {\n\tSET_CELL = 'SET_CELL',\n\tINIT_GRID = 'INIT_GRID',\n\tRANDOM_PUT_ITEM = 'RANDOM_PUT_ITEM',\n}\n\nexport interface setCellAction extends Action {\n\ttype: GridKeys.SET_CELL;\n\tposition: position;\n\tcellType: CellType;\n}\n\nexport interface initializeGridAction extends Action {\n\ttype: GridKeys.INIT_GRID;\n\thead: position;\n}\n\nexport interface randomPutItemAction extends Action {\n\ttype: GridKeys.RANDOM_PUT_ITEM;\n}\n\nexport type GridAction = (\n\t| setCellAction\n\t| initializeGridAction\n\t| randomPutItemAction\n);\n","export const gridSize = [10, 10];\nexport const cellSize = 20;\n\nexport enum CellType {\n\tCELL_BLANK = 0,\n\tCELL_SNAKE_HEAD,\n\tCELL_SNAKE_BODY,\n\tCELL_SNAKE_ITEM,\n\tCELL_SNAKE_BLOCK,\n}\n","import {\n\tDispatch,\n\tAnyAction,\n} from 'redux';\n\nimport {\n\tSnakeKeys,\n\tPopTailsAction,\n\tPushTailsAction,\n\tMoveHeadAction,\n\tToggleGameOverAction,\n\tIncrementScoreAction,\n} from './types';\n\nimport {\n\tState,\n} from '../reducers';\n\nimport {\n\tposition,\n} from '../models';\n\nimport {\n\tgetPos,\n\tgetTails,\n\tgetGrid,\n} from '../selectors';\n\nimport {\n\trandomPutItem,\n\tsetCell,\n} from '../actions';\n\nimport {\n\tCellType,\n\tgridSize,\n} from '../constants';\n\nfunction popTails(): PopTailsAction {\n\treturn {\n\t\ttype: SnakeKeys.POP_TAILS,\n\t};\n}\n\nfunction pushTails(targetPos: position): PushTailsAction {\n\treturn {\n\t\ttype: SnakeKeys.PUSH_TAILS,\n\t\ttargetPos: targetPos,\n\t};\n}\n\nfunction moveHead(targetPos: position): MoveHeadAction {\n\treturn {\n\t\ttype: SnakeKeys.MOVE_HEAD,\n\t\ttargetPos: targetPos,\n\t};\n}\n\nfunction toggleGameOver(): ToggleGameOverAction {\n\treturn {\n\t\ttype: SnakeKeys.TOGGLE_GAME_OVER,\n\t};\n}\n\nfunction incrementScore(): IncrementScoreAction {\n\treturn {\n\t\ttype: SnakeKeys.INCREMENT_SCORE,\n\t};\n}\n\nfunction couldMoveHead(keyCode: number, targetPos: position, state: State) {\n\tif(targetPos.posY < 0 || targetPos.posY >= gridSize[0]) {\n\t\treturn false;\n\t}\n\tif(targetPos.posX < 0 || targetPos.posX >= gridSize[1]) {\n\t\treturn false;\n\t}\n\treturn keyCode >= 37 && keyCode <= 40;\n}\n\nfunction keydownMoveHead(prevPos: position, targetPos: position, endOfTail: position) {\n\treturn (dispatch: Dispatch<AnyAction>) => {\n\t\tdispatch(setCell(targetPos, CellType.CELL_SNAKE_HEAD));\n\t\tdispatch(moveHead(targetPos));\n\t\tif(endOfTail === undefined) {\n\t\t\tdispatch(setCell(prevPos, CellType.CELL_BLANK));\n\t\t}\n\t\telse {\n\t\t\tdispatch(setCell(prevPos, CellType.CELL_SNAKE_BODY));\n\t\t\tdispatch(setCell(endOfTail, CellType.CELL_BLANK));\n\n\t\t\tdispatch(pushTails(prevPos));\n\t\t\tdispatch(popTails());\n\t\t}\n\t};\n}\n\nfunction keydownMoveAndStretch(prevPos: position, targetPos: position) {\n\treturn (dispatch: Dispatch<AnyAction>) => {\n\t\tdispatch(setCell(prevPos, CellType.CELL_SNAKE_BODY));\n\t\tdispatch(setCell(targetPos, CellType.CELL_SNAKE_HEAD));\n\n\t\tdispatch(moveHead(targetPos));\n\t\tdispatch(pushTails(prevPos));\n\n\t\tdispatch(randomPutItem());\n\t\tdispatch(incrementScore());\n\t};\n}\n\nexport function keydownMoveHeadIfNeeded(keyCode: number) {\n\treturn (dispatch: Dispatch<any>, getState: () => State) => {\n\t\tconst state = getState();\n\t\tconst prevPos = getPos(state);\n\t\tconst targetPos = (() => {\n\t\t\tswitch(keyCode) {\n\t\t\t\tcase 37:\n\t\t\t\t\treturn {\n\t\t\t\t\t\tposX: prevPos.posX - 1,\n\t\t\t\t\t\tposY: prevPos.posY,\n\t\t\t\t\t};\n\t\t\t\tcase 38:\n\t\t\t\t\treturn {\n\t\t\t\t\t\tposX: prevPos.posX,\n\t\t\t\t\t\tposY: prevPos.posY - 1,\n\t\t\t\t\t};\n\t\t\t\tcase 39:\n\t\t\t\t\treturn {\n\t\t\t\t\t\tposX: prevPos.posX + 1,\n\t\t\t\t\t\tposY: prevPos.posY,\n\t\t\t\t\t};\n\t\t\t\tcase 40:\n\t\t\t\t\treturn {\n\t\t\t\t\t\tposX: prevPos.posX,\n\t\t\t\t\t\tposY: prevPos.posY + 1,\n\t\t\t\t\t};\n\t\t\t\tdefault:\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t})();\n\t\tif(targetPos !== undefined && targetPos !== null){\n\t\t\tif(couldMoveHead(keyCode, targetPos, state)) {\n\t\t\t\tconst targetCellType = getGrid(state)[targetPos.posY][targetPos.posX];\n\t\t\t\tif(targetCellType === CellType.CELL_BLANK) {\n\t\t\t\t\tconst endOfTail = getTails(state)[0];\n\t\t\t\t\tdispatch(keydownMoveHead(prevPos, targetPos, endOfTail));\n\t\t\t\t}\n\t\t\t\telse if(targetCellType === CellType.CELL_SNAKE_ITEM) {\n\t\t\t\t\tdispatch(keydownMoveAndStretch(prevPos, targetPos));\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdispatch(toggleGameOver());\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tdispatch(toggleGameOver());\n\t\t\t}\n\t\t}\n\t};\n}\n","import {\n\tsetCellAction,\n\tGridKeys,\n\tinitializeGridAction,\n\trandomPutItemAction,\n} from './types';\n\nimport {\n\tposition,\n} from '../models';\n\nimport {\n\tCellType,\n} from '../constants';\n\nexport function setCell(position: position, cellType: CellType): setCellAction {\n\treturn {\n\t\ttype: GridKeys.SET_CELL,\n\t\tposition: position,\n\t\tcellType: cellType,\n\t};\n}\n\nexport function randomPutItem(): randomPutItemAction {\n\treturn {\n\t\ttype: GridKeys.RANDOM_PUT_ITEM,\n\t};\n}\n\nexport function initializeGrid(head: position): initializeGridAction {\n\treturn {\n\t\ttype: GridKeys.INIT_GRID,\n\t\thead: head,\n\t};\n}\n","import * as React from 'react';\n\nimport {\n\tDispatch,\n\tAnyAction,\n\tbindActionCreators,\n} from 'redux';\n\nimport {\n\tconnect,\n} from 'react-redux';\n\nimport {\n\tState,\n} from '../reducers';\n\nimport {\n\tgetPos,\n\tgetTails,\n\tgetItem,\n\tgetGameStatus,\n\tgetScore,\n\tgetBlock,\n} from '../selectors';\n\nimport {\n\tposition,\n} from '../models';\n\nimport {\n\tinitializeGrid,\n\trandomPutItem,\n} from '../actions';\n\nimport {\n\tgridSize,\n\tcellSize,\n} from '../constants';\n\nimport {\n\tKeyboardHandlerContainer,\n} from '../containers';\n\ninterface ComponentProps {\n\thead: position;\n\ttails: position[];\n\titem: position;\n\tblock: position;\n\tisGameOver: boolean;\n\tscore: number;\n\n\tinitializeGrid: typeof initializeGrid;\n\trandomPutItem: typeof randomPutItem;\n}\n\nclass GridComponent extends React.Component<ComponentProps> {\n\tpublic componentDidMount() {\n\t\tconst {\n\t\t\thead,\n\t\t} = this.props;\n\t\tthis.props.initializeGrid(head);\n\t\tthis.props.randomPutItem();\n\t}\n\n\tpublic render() {\n\t\tconst {\n\t\t\thead,\n\t\t\ttails,\n\t\t\titem,\n\t\t\tblock,\n\t\t\tisGameOver,\n\t\t\tscore,\n\t\t} = this.props;\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\twidth: `${gridSize[1] * cellSize}px`,\n\t\t\t\t\theight: `${gridSize[0] * cellSize}px`,\n\t\t\t\t\tborder: '2px solid grey',\n\t\t\t\t}}\n\t\t\t>\n\t\t\t{\n\t\t\t\tisGameOver ?\n\t\t\t\t<React.Fragment>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t{'Game'}\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t{'Set'}\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t{`Score: ${score}`}\n\t\t\t\t\t</p>\n\t\t\t\t</React.Fragment>\n\t\t\t\t:\n\t\t\t\t<React.Fragment>\n\t\t\t\t\t<KeyboardHandlerContainer/>\n\t\t\t\t\t<div\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\t\t\twidth: `${cellSize}px`,\n\t\t\t\t\t\t\theight: `${cellSize}px`,\n\t\t\t\t\t\t\tbackground: 'black',\n\t\t\t\t\t\t\ttop: head.posY * cellSize,\n\t\t\t\t\t\t\tleft: head.posX * cellSize,\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t\t{tails.map((e, i) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\t\t\t\t\twidth: `${cellSize}px`,\n\t\t\t\t\t\t\t\t\theight: `${cellSize}px`,\n\t\t\t\t\t\t\t\t\tbackground: 'grey',\n\t\t\t\t\t\t\t\t\ttop: e.posY * cellSize,\n\t\t\t\t\t\t\t\t\tleft: e.posX * cellSize,\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t\t<div\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\t\t\twidth: `${cellSize}px`,\n\t\t\t\t\t\t\theight: `${cellSize}px`,\n\t\t\t\t\t\t\tbackground: 'green',\n\t\t\t\t\t\t\ttop: item.posY * cellSize,\n\t\t\t\t\t\t\tleft: item.posX * cellSize,\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t\t<div\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\t\t\twidth: `${cellSize}px`,\n\t\t\t\t\t\t\theight: `${cellSize}px`,\n\t\t\t\t\t\t\tbackground: 'red',\n\t\t\t\t\t\t\ttop: block.posY * cellSize,\n\t\t\t\t\t\t\tleft: block.posX * cellSize,\n\t\t\t\t\t\t\tcolor: 'white',\n\t\t\t\t\t\t\tfontWeight: 'bold',\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{'X'}\n\t\t\t\t\t</div>\n\t\t\t\t</React.Fragment>\n\t\t\t}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nfunction mapStateToProps(state: State) {\n\treturn {\n\t\thead: getPos(state),\n\t\ttails: getTails(state),\n\t\titem: getItem(state),\n\t\tblock: getBlock(state),\n\t\tisGameOver: getGameStatus(state),\n\t\tscore: getScore(state),\n\t};\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>) {\n\treturn bindActionCreators({\n\t\tinitializeGrid: initializeGrid,\n\t\trandomPutItem: randomPutItem,\n\t}, dispatch);\n}\nexport const GridContainer = connect(mapStateToProps, mapDispatchToProps)(GridComponent);\n","import * as React from 'react';\n\nimport {\n\tAnyAction,\n\tDispatch,\n\tbindActionCreators,\n} from 'redux';\n\nimport {\n\tconnect,\n} from 'react-redux';\n\nimport {\n\tkeydownMoveHeadIfNeeded,\n\tinitializeGrid,\n} from '../actions';\n\nimport {\n\tState,\n} from '../reducers';\n\ninterface ComponentProps {\n\tkeydownMoveHeadIfNeeded: typeof keydownMoveHeadIfNeeded;\n\tinitializeGrid: typeof initializeGrid;\n}\n\nclass KeyboardHandlerComponent extends React.Component<ComponentProps> {\n\tconstructor(props: ComponentProps) {\n\t\tsuper(props);\n\t\tthis.onKeyDown = this.onKeyDown.bind(this);\n\t}\n\n\tprivate onKeyDown(ev: KeyboardEvent) {\n\t\tthis.props.keydownMoveHeadIfNeeded(ev.keyCode);\n\t}\n\n\tpublic componentDidMount() {\n\t\twindow.addEventListener('keydown', this.onKeyDown);\n\t}\n\n\tpublic componentWillUnmount() {\n\t\twindow.removeEventListener('keydown', this.onKeyDown);\n\t}\n\n\tpublic render() {\n\t\treturn (\n\t\t\t<div/>\n\t\t);\n\t}\n}\n\nfunction mapStateToProps(state: State) {\n\treturn {};\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>) {\n\treturn bindActionCreators({\n\t\tkeydownMoveHeadIfNeeded: keydownMoveHeadIfNeeded,\n\t\tinitializeGrid: initializeGrid,\n\t}, dispatch);\n}\n\nexport const KeyboardHandlerContainer = connect(mapStateToProps, mapDispatchToProps)(KeyboardHandlerComponent);\n","import {\n\tSnakeAction,\n\tSnakeKeys,\n} from '../actions/types';\n\nimport {\n\tposition,\n} from '../models';\n\nexport interface SnakeState {\n\thead: position;\n\ttails: position[];\n\tisGameOver: boolean;\n\tscore: number;\n}\n\nconst initialSnakeState: SnakeState = {\n\thead: {\n\t\tposX: 0,\n\t\tposY: 0,\n\t},\n\ttails: [],\n\tisGameOver: false,\n\tscore: 0,\n};\n\nexport function snake(state = initialSnakeState, action: SnakeAction) {\n\tconst {\n\t\ttails,\n\t\tscore,\n\t} = state;\n\n\tswitch(action.type) {\n\t\tcase SnakeKeys.MOVE_HEAD:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\thead: action.targetPos,\n\t\t\t};\n\t\tcase SnakeKeys.POP_TAILS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\ttails: tails.slice(1),\n\t\t\t};\n\t\tcase SnakeKeys.PUSH_TAILS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\ttails: tails.concat(action.targetPos),\n\t\t\t};\n\t\tcase SnakeKeys.TOGGLE_GAME_OVER:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisGameOver: true,\n\t\t\t};\n\t\tcase SnakeKeys.INCREMENT_SCORE:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tscore: score + 1,\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n","import {\n\tCellType,\n\tgridSize,\n} from '../constants';\n\nimport {\n\tGridAction, GridKeys,\n} from '../actions/types';\n\nimport {\n\tposition,\n} from '../models';\n\nexport interface GridState {\n\tgrid: CellType[][];\n\titem: position;\n\tblock: position;\n}\n\nconst initialGridState: GridState = {\n\tgrid: [],\n\titem: {\n\t\tposX: 0,\n\t\tposY: 0,\n\t},\n\tblock: {\n\t\tposX: 0,\n\t\tposY: 0,\n\t},\n};\n\nexport function grid(state = initialGridState, action: GridAction) {\n\tswitch(action.type) {\n\t\tcase GridKeys.SET_CELL:\n\t\t\tconst grid = state.grid;\n\t\t\tgrid[action.position.posY][action.position.posX] = action.cellType;\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tgrid: grid,\n\t\t\t};\n\t\tcase GridKeys.INIT_GRID:\n\t\t\tconst initGrid = Array.from(Array(gridSize[0])).map((_1, i) => {\n\t\t\t\treturn Array.from(Array(gridSize[1])).map((_2, j) => {\n\t\t\t\t\tif(i === action.head.posY && j === action.head.posX) {\n\t\t\t\t\t\treturn CellType.CELL_SNAKE_HEAD;\n\t\t\t\t\t}\n\t\t\t\t\treturn CellType.CELL_BLANK;\n\t\t\t\t});\n\t\t\t});\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tgrid: initGrid,\n\t\t\t};\n\t\tcase GridKeys.RANDOM_PUT_ITEM:\n\t\t\tconst newGrid = state.grid;\n\t\t\tconst prevBlock = state.block;\n\t\t\tlet randomItemPosX = 0;\n\t\t\tlet randomItemPosY = 0;\n\t\t\tlet randomBlockPosX = 0;\n\t\t\tlet randomBlockPosY = 0;\n\t\t\twhile(true){\n\t\t\t\trandomItemPosY = Math.floor(Math.random() * gridSize[0]);\n\t\t\t\trandomItemPosX = Math.floor(Math.random() * gridSize[1]);\n\t\t\t\tif(newGrid[randomItemPosY][randomItemPosX] === CellType.CELL_BLANK){\n\t\t\t\t\tnewGrid[randomItemPosY][randomItemPosX] = CellType.CELL_SNAKE_ITEM;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile(true){\n\t\t\t\trandomBlockPosY = Math.floor(Math.random() * gridSize[0]);\n\t\t\t\trandomBlockPosX = Math.floor(Math.random() * gridSize[1]);\n\t\t\t\tif(newGrid[randomBlockPosY][randomBlockPosX] === CellType.CELL_BLANK){\n\t\t\t\t\tnewGrid[randomBlockPosY][randomBlockPosX] = CellType.CELL_SNAKE_BLOCK;\n\t\t\t\t\tnewGrid[prevBlock.posY][prevBlock.posX] = CellType.CELL_BLANK;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tgrid: newGrid,\n\t\t\t\titem: {\n\t\t\t\t\tposX: randomItemPosX,\n\t\t\t\t\tposY: randomItemPosY,\n\t\t\t\t},\n\t\t\t\tblock: {\n\t\t\t\t\tposX: randomBlockPosX,\n\t\t\t\t\tposY: randomBlockPosY,\n\t\t\t\t},\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n","import {\n\tcombineReducers,\n} from 'redux';\n\nimport {\n\tsnake,\n\tSnakeState,\n} from './SnakeReducer';\n\nimport {\n\tgrid,\n\tGridState,\n} from './GridReducer';\n\nexport interface State {\n\tsnake: SnakeState;\n\tgrid: GridState;\n}\n\nexport const reducers = combineReducers<State>({\n\tsnake,\n\tgrid,\n});\n","import * as React from 'react';\n\nimport {\n\tGridContainer,\n} from './containers';\n\nimport {\n\tcreateStore,\n\tapplyMiddleware,\n} from 'redux';\n\nimport {\n\tProvider,\n} from 'react-redux';\n\nimport thunk from 'redux-thunk';\n\nimport {\n\treducers,\n} from './reducers';\n\nimport './App.css';\n\nexport class App extends React.Component {\n\n\tpublic render() {\n\t\treturn (\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\tflexDirection: 'row',\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<div>\n\t\t\t\t\t<Provider\n\t\t\t\t\t\tstore={createStore(reducers, applyMiddleware(thunk))}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t\t<GridContainer/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Provider>\n\t\t\t\t\t<Provider\n\t\t\t\t\t\tstore={createStore(reducers, applyMiddleware(thunk))}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t\t<GridContainer/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Provider>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<Provider\n\t\t\t\t\t\tstore={createStore(reducers, applyMiddleware(thunk))}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t\t<GridContainer/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Provider>\n\t\t\t\t\t<Provider\n\t\t\t\t\t\tstore={createStore(reducers, applyMiddleware(thunk))}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t\t<GridContainer/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Provider>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\n\nimport {\n\tApp,\n} from './App';\n\nReactDOM.render(\n\t<App />,\n\tdocument.getElementById('root'),\n);\n"],"sourceRoot":""}